name: Push to ECR

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag (e.g., v1.0.0, latest)'
        required: false
        default: 'latest'

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: hono-lambda-poc

jobs:
  push-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    # Uncomment when check.yml workflow is tested
    # needs: check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        run: |
          # Determine image tags based on trigger
          TAGS=""

          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag push (e.g., v1.0.0)
            VERSION=${GITHUB_REF#refs/tags/}
            TAGS="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${VERSION}"
            TAGS="${TAGS},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger
            TAG="${{ github.event.inputs.tag }}"
            TAGS="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${TAG}"
          else
            # Main branch push
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            TAGS="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${SHORT_SHA}"
            TAGS="${TAGS},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Image tags: ${TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Image digest
        run: echo "Image pushed successfully!"
