name: Code Quality Check

on:
  push:
    branches:
      - main
      - 'claude/**'
  pull_request:
    branches:
      - main

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Biome lint
        run: npm run lint

      - name: Run Biome format check
        run: npx biome format --write=false ./

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npx tsc --noEmit

  build:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build client
        run: npx vite build --mode client

      - name: Build server
        run: npx vite build

      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -lah dist/

          # Verify client artifacts
          if [ ! -f "dist/static/client.js" ]; then
            echo "Error: Client build artifact not found"
            exit 1
          fi

          # Verify server artifacts
          if [ ! -f "dist/index.js" ]; then
            echo "Error: Server build artifact not found"
            exit 1
          fi

          echo "All build artifacts verified successfully!"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  docker-build:
    name: Docker Build Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: false
          tags: hono-lambda-poc:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: false
          tags: hono-lambda-poc:test
          outputs: type=docker,dest=/tmp/image.tar

      - name: Check image size
        run: |
          echo "Docker image size:"
          ls -lh /tmp/image.tar

          IMAGE_SIZE_MB=$(du -m /tmp/image.tar | cut -f1)
          echo "Image size: ${IMAGE_SIZE_MB}MB"

          # Warning if image is larger than 500MB
          if [ "$IMAGE_SIZE_MB" -gt 500 ]; then
            echo "Warning: Docker image is larger than 500MB"
          fi

  check-success:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, build, docker-build]
    if: always()

    steps:
      - name: Check status
        run: |
          if [ "${{ needs.lint-and-format.result }}" != "success" ] || \
             [ "${{ needs.type-check.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.docker-build.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks completed successfully!"
