AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  GitHubOrg:
    Description: Name of GitHub organization/user (case sensitive)
    Type: String
    Default: oyakodon

  RepositoryName:
    Description: Name of GitHub repository (case sensitive)
    Type: String
    Default: hono-lambda-poc

  OIDCProviderArn:
    Description: Arn for the GitHub OIDC Provider. (optional)
    Type: String
    Default: ""

  OIDCAudience:
    Description: Audience supplied to configure-aws-credentials.
    Type: String
    Default: sts.amazonaws.com

Conditions:
  CreateOIDCProvider: !Equals
    - !Ref OIDCProviderArn
    - ""

Resources:
  # OIDC Provider for GitHub Actions
  GithubOidc:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - ffffffffffffffffffffffffffffffffffffffff
    Condition: CreateOIDCProvider

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}
      ImageScanningConfiguration:
        ScanOnPush: false
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only last 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # IAM Role for GitHub Actions
  GHARole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !If
                - CreateOIDCProvider
                - !Ref GithubOidc
                - !Ref OIDCProviderArn
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: !Ref OIDCAudience
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrg}/${RepositoryName}:*
      Policies:
        - PolicyName: ECRPushPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # ECR認証トークン取得(アカウントレベル)
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              # ECRイメージプッシュ(このスタックで作成したリポジトリのみ)
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: !GetAtt ECRRepository.Arn
        - PolicyName: LambdaUpdatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Lambda関数の更新(アカウント・リージョンレベル)
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'

Outputs:
  ECRRepositoryUri:
    Description: 'ECR Repository URI'
    Value: !GetAtt ECRRepository.RepositoryUri

  GHARoleArn:
    Description: 'IAM Role ARN for GitHub Actions'
    Value: !GetAtt GHARole.Arn
